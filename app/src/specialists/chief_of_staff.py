import operator
from typing import Annotated, TypedDict, List

from langchain_core.messages import BaseMessage
from langgraph.graph import StateGraph, END

from .systems_architect import SystemsArchitect
from .web_builder import WebBuilder


class GraphState(TypedDict):
    """
    Represents the state of our graph.

    Attributes:
        original_goal: The initial, high-level goal from the user.
        mermaid_code: The Mermaid.js code generated by the Systems Architect.
        final_html: The final HTML artifact generated by the Web Builder.
        error: A string to hold any error messages.
        messages: A list to accumulate messages during the workflow.
    """
    original_goal: str
    mermaid_code: str
    final_html: str
    error: str
    messages: Annotated[List[BaseMessage], operator.add]


class ChiefOfStaffSpecialist:
    """
    A standalone orchestrator class that manages an internal LangGraph to
    execute a sequence of tasks. It does NOT inherit from BaseSpecialist.
    """

    def __init__(self, systems_architect: SystemsArchitect, web_builder: WebBuilder):
        """
        Standard Python constructor for the orchestrator.
        """
        self.systems_architect = systems_architect
        self.web_builder = web_builder
        self.graph = self.compile_graph()

    def call_systems_architect(self, state: GraphState) -> dict:
        """Node that invokes the Systems Architect to generate a Mermaid diagram."""
        print("---CHIEF OF STAFF: Calling Systems Architect---")
        try:
            return self.systems_architect.execute(state)
        except Exception as e:
            return {"error": f"Systems Architect failed: {e}"}

    def call_web_builder(self, state: GraphState) -> dict:
        """Node that invokes the Web Builder to create an HTML artifact."""
        print("---CHIEF OF STAFF: Calling Web Builder---")
        if state.get("error"):
            return {}
        try:
            return self.web_builder.execute(state)
        except Exception as e:
            return {"error": f"Web Builder failed: {e}"}

    def compile_graph(self) -> StateGraph:
        """Compiles the internal workflow graph for the Chief of Staff."""
        workflow = StateGraph(GraphState)
        workflow.add_node("systems_architect", self.call_systems_architect)
        workflow.add_node("web_builder", self.call_web_builder)
        workflow.set_entry_point("systems_architect")
        workflow.add_edge("systems_architect", "web_builder")
        workflow.add_edge("web_builder", END)
        return workflow.compile()

    def invoke(self, goal: str) -> dict:
        """
        Invokes the Chief of Staff's internal workflow with a high-level goal.
        """
        print(f"---CHIEF OF STAFF: Workflow initiated with goal: '{goal}'---")
        initial_state = {"original_goal": goal, "messages": []}
        final_state = self.graph.invoke(initial_state)
        print("---CHIEF OF STAFF: Workflow Complete---")
        return final_state
