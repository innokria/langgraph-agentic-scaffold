# app/src/graph/state.py
from typing import List, Dict, Any, Optional
from typing_extensions import TypedDict
from langchain_core.messages import BaseMessage

class GraphState(TypedDict):
    """
    Represents the state of our graph. This is the central memory of the agent.

    Attributes:
        messages: The list of messages that form the conversation.
        next_specialist: The name of the specialist to route to next.
        text_to_process: Text content passed between specialists (e.g., from a file).
        extracted_data: Structured data extracted by specialists.
        error: Any error messages that have occurred.
        json_artifact: A JSON object produced by a specialist.
        html_artifact: An HTML document produced by a specialist.
        system_plan: A technical plan created by the systems_architect.
        turn_count: The current turn number in the conversation.
        recommended_specialists: A list of specialists recommended for the next step.
        task_is_complete: A flag indicating if the overall task is complete.
        web_builder_iteration: A counter for the WebBuilder's refinement cycles.
        archive_report: The final markdown report generated by the archiver.
    """
    messages: List[BaseMessage]
    next_specialist: Optional[str]
    text_to_process: Optional[str]
    extracted_data: Optional[Dict[str, Any]]
    error: Optional[str]
    json_artifact: Optional[Dict[str, Any]]
    html_artifact: Optional[str]
    system_plan: Optional[Dict[str, Any]]
    turn_count: int
    recommended_specialists: Optional[List[str]]
    task_is_complete: bool
    web_builder_iteration: Optional[int]
    archive_report: Optional[str]